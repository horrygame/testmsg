import argparse
import socket
import threading
import os
import sys
import time

# ------------------------- –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ -------------------------

def clear_screen():
    """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
    os.system('cls' if os.name == 'nt' else 'clear')

# ------------------------- –°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å -------------------------

def start_server(host, port):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
    clients = {}
    
    def handle_client(client_socket, address):
        nickname = client_socket.recv(1024).decode()
        clients[client_socket] = nickname
        print(f"[+] {nickname} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è ({address[0]})")
        broadcast(f"{nickname} –≤–æ—à—ë–ª –≤ —á–∞—Ç!".encode(), sender=None)
        
        while True:
            try:
                message = client_socket.recv(1024)
                if not message:
                    break
                broadcast(message, sender=client_socket, nickname=nickname)
            except:
                break

        del clients[client_socket]
        client_socket.close()
        broadcast(f"{nickname} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.".encode(), sender=None)

    def broadcast(message, sender=None, nickname=""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if nickname:
            formatted_msg = f"[{nickname}] {message.decode()}".encode()
        else:
            formatted_msg = message
            
        for client in list(clients.keys()):
            if client != sender:
                try:
                    client.send(formatted_msg)
                except:
                    pass

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((host, port))
    server.listen(10)
    
    print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")
    print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    print("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    
    try:
        while True:
            client_socket, address = server.accept()
            thread = threading.Thread(
                target=handle_client, 
                args=(client_socket, address),
                daemon=True
            )
            thread.start()
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        server.close()

# ------------------------- –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å -------------------------

def start_client(server_host, server_port):
    """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
    def receive_messages():
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                message = client_socket.recv(1024).decode()
                print(f"\r{message}\n> ", end="")
            except:
                print("\rüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ")
                os._exit(1)

    clear_screen()
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    print("       üöÄ –ü–†–û–°–¢–û–ô –ú–ï–°–°–ï–ù–î–ñ–ï–†")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    
    nickname = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫: ")
    
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        client_socket.connect((server_host, server_port))
        client_socket.send(nickname.encode())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return

    receive_thread = threading.Thread(target=receive_messages, daemon=True)
    receive_thread.start()
    
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É! (exit –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    
    while True:
        try:
            message = input("> ")
            if message.lower() == 'exit':
                break
            client_socket.send(message.encode())
        except KeyboardInterrupt:
            break

    client_socket.close()
    print("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

# ------------------------- –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ -------------------------

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Simple Messenger')
    parser.add_argument('--server', action='store_true', help='Run in server mode')
    parser.add_argument('--client', action='store_true', help='Run in client mode')
    parser.add_argument('--host', type=str, default='0.0.0.0', help='Server host (default: 0.0.0.0)')
    parser.add_argument('--port', type=int, default=65432, help='Server port (default: 65432)')
    
    args = parser.parse_args()
    
    if args.server:
        start_server(args.host, args.port)
    elif args.client:
        server_host = input("–í–≤–µ–¥–∏—Ç–µ IP —Å–µ—Ä–≤–µ—Ä–∞: ") if not args.host else args.host
        server_port = int(input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞: ")) if not args.port else args.port
        start_client(server_host, server_port)
    else:
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:")
        print("  –°–µ—Ä–≤–µ—Ä: python messenger.py --server")
        print("  –ö–ª–∏–µ–Ω—Ç: python messenger.py --client")
        print("\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print("  --host HOST (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π IP)")
        print("  --port PORT (–Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞)")
